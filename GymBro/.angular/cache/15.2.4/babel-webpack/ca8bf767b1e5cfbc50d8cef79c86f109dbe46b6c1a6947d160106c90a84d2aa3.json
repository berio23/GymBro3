{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nfunction TrackWorkoutComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const workout_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", workout_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate4(\" \", workout_r2.sets, \" sets of \", workout_r2.repetitions, \" reps at \", workout_r2.weight, \" kg (\", workout_r2.setType, \") \");\n  }\n}\nfunction TrackWorkoutComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"progress\", 6);\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate4(\" \", ctx_r1.selectedWorkout.sets, \" sets of \", ctx_r1.selectedWorkout.repetitions, \" reps at \", ctx_r1.selectedWorkout.weight, \" kg (\", ctx_r1.selectedWorkout.setType, \") \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r1.completedSets);\n    i0.ɵɵpropertyInterpolate(\"max\", ctx_r1.selectedWorkout.sets);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r1.completedSets, \" / \", ctx_r1.selectedWorkout.sets, \" sets completed\");\n  }\n}\nexport class TrackWorkoutComponent {\n  constructor(http) {\n    this.http = http;\n    this.workouts = [];\n    this.selectedWorkout = null;\n    this.completedSets = 0;\n    this.apiUrl = 'http://localhost:5000/api/workouts';\n    this.loadWorkouts();\n  }\n  loadWorkouts() {\n    this.http.get(this.apiUrl).subscribe(workouts => {\n      this.workouts = workouts;\n    }, error => {\n      console.error('Error loading workouts:', error);\n    });\n  }\n  onSubmit() {\n    // Update the workout progress by calling the backend API\n    // This part is not implemented in the backend yet, you need to create an API endpoint to handle progress updates\n  }\n}\nTrackWorkoutComponent.ɵfac = function TrackWorkoutComponent_Factory(t) {\n  return new (t || TrackWorkoutComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nTrackWorkoutComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TrackWorkoutComponent,\n  selectors: [[\"app-track-workout\"]],\n  decls: 17,\n  vars: 4,\n  consts: [[\"name\", \"selectedWorkout\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", \"min\", \"0\", \"name\", \"completedSets\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [4, \"ngIf\"], [3, \"value\"], [3, \"value\", \"max\"]],\n  template: function TrackWorkoutComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Track Workout\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\")(3, \"label\");\n      i0.ɵɵtext(4, \"Workout:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"select\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function TrackWorkoutComponent_Template_select_ngModelChange_5_listener($event) {\n        return ctx.selectedWorkout = $event;\n      });\n      i0.ɵɵtemplate(6, TrackWorkoutComponent_option_6_Template, 2, 5, \"option\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelementStart(8, \"label\");\n      i0.ɵɵtext(9, \"Completed Sets:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function TrackWorkoutComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.completedSets = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"button\", 3);\n      i0.ɵɵtext(13, \"Track Workout\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"h3\");\n      i0.ɵɵtext(15, \"Workout Progress:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(16, TrackWorkoutComponent_div_16_Template, 6, 8, \"div\", 4);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedWorkout);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.workouts);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.completedSets);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.selectedWorkout);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;IAIIA,iCAA2D;IACzDA,YACF;IAAAA,iBAAS;;;;IAFgCA,kCAAiB;IACxDA,eACF;IADEA,mJACF;;;;;IAUJA,2BAA6B;IAEzBA,YACF;IAAAA,iBAAI;IACJA,8BAA8E;IAC9EA,yBAAG;IAAAA,YAA2D;IAAAA,iBAAI;;;;IAHhEA,eACF;IADEA,mMACF;IACUA,eAAyB;IAAzBA,uDAAyB;IAACA,4DAA8B;IAC/DA,eAA2D;IAA3DA,sGAA2D;;;ACbhE,OAAM,MAAOC,qBAAqB;EAMhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALxB,aAAQ,GAAU,EAAE;IACpB,oBAAe,GAAQ,IAAI;IAC3B,kBAAa,GAAG,CAAC;IACT,WAAM,GAAG,oCAAoC;IAGnD,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAY;IACV,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,IAAI,CAACC,MAAM,CAAC,CAACC,SAAS,CACxCC,QAAQ,IAAI;MACX,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CACF;EACH;EAGAE,QAAQ;IACN;IACA;EAAA;;AAxBSV,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDRlChB,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK;MACtBA,4BAAM;MACGA,wBAAQ;MAAAA,iBAAQ;MACvBA,iCAA6D;MAArDA;QAAA;MAAA,EAA6B;MACnCA,4EAES;MACXA,iBAAS;MAAAA,qBAAM;MAEfA,6BAAO;MAAAA,+BAAe;MAAAA,iBAAQ;MAC9BA,iCAAgF;MAAnDA;QAAA;MAAA,EAA2B;MAAxDA,iBAAgF;MAAAA,sBAAM;MAEtFA,kCAAsB;MAAAA,8BAAa;MAAAA,iBAAS;MAG9CA,2BAAI;MAAAA,kCAAiB;MAAAA,iBAAK;MAC1BA,wEAMM;;;MAnBIA,eAA6B;MAA7BA,6CAA6B;MACPA,eAAW;MAAXA,sCAAW;MAMZA,eAA2B;MAA3BA,2CAA2B;MAMpDA,eAAqB;MAArBA,0CAAqB","names":["i0","TrackWorkoutComponent","constructor","http","loadWorkouts","get","apiUrl","subscribe","workouts","error","console","onSubmit","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\zimba\\OneDrive\\Dokumente\\Advanced Software\\Projekt\\GymBro3\\GymBro\\src\\app\\track-workout\\track-workout.component.html","C:\\Users\\zimba\\OneDrive\\Dokumente\\Advanced Software\\Projekt\\GymBro3\\GymBro\\src\\app\\track-workout\\track-workout.component.ts"],"sourcesContent":["<h2>Track Workout</h2>\n<form>\n  <label>Workout:</label>\n  <select [(ngModel)]=\"selectedWorkout\" name=\"selectedWorkout\">\n    <option *ngFor=\"let workout of workouts\" [value]=\"workout\">\n      {{workout.sets}} sets of {{workout.repetitions}} reps at {{workout.weight}} kg ({{workout.setType}})\n    </option>\n  </select><br />\n\n  <label>Completed Sets:</label>\n  <input type=\"number\" min=\"0\" [(ngModel)]=\"completedSets\" name=\"completedSets\" /><br />\n\n  <button type=\"submit\">Track Workout</button>\n</form>\n<!-- Add this code after the form -->\n<h3>Workout Progress:</h3>\n<div *ngIf=\"selectedWorkout\">\n  <p>\n    {{selectedWorkout.sets}} sets of {{selectedWorkout.repetitions}} reps at {{selectedWorkout.weight}} kg ({{selectedWorkout.setType}})\n  </p>\n  <progress value=\"{{completedSets}}\" max=\"{{selectedWorkout.sets}}\"></progress>\n  <p>{{completedSets}} / {{selectedWorkout.sets}} sets completed</p>\n</div>\n","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-track-workout',\n  templateUrl: './track-workout.component.html',\n  styleUrls: ['./track-workout.component.css']\n})\nexport class TrackWorkoutComponent {\n  workouts: any[] = [];\n  selectedWorkout: any = null;\n  completedSets = 0;\n  private apiUrl = 'http://localhost:5000/api/workouts';\n\n  constructor(private http: HttpClient) {\n    this.loadWorkouts();\n  }\n\n  loadWorkouts() {\n    this.http.get<any[]>(this.apiUrl).subscribe(\n      (workouts) => {\n        this.workouts = workouts;\n      },\n      (error) => {\n        console.error('Error loading workouts:', error);\n      }\n    );\n  }\n\n\n  onSubmit() {\n    // Update the workout progress by calling the backend API\n    // This part is not implemented in the backend yet, you need to create an API endpoint to handle progress updates\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}